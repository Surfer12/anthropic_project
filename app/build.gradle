/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.4'
    // Code quality plugins
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'com.github.spotbugs' version '6.0.11'
    
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation "org.junit.jupiter:junit-jupiter:5.10.2"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation "com.google.guava:guava:33.0.0-jre"

    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.projectreactor:reactor-core'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
}

// Code quality configurations
checkstyle {
    toolVersion = '10.12.1'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    maxWarnings = 0
}

pmd {
    toolVersion = '6.55.0'
    consoleOutput = true
    ruleSetFiles = files("${rootDir}/config/pmd/ruleset.xml")
}

spotbugs {
    toolVersion = '4.8.5'
    effort = 'MAX'
    reportLevel = 'medium'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
        vendor = JvmVendorSpec.ADOPTIUM
    }
}   


application {
    // Define the main class for the application.
    mainClass = 'rcct.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests
    useJUnitPlatform()
    
    // Enable JaCoCo coverage
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

// Add combined quality check task
task codeQualityCheck {
    dependsOn 'checkstyleMain', 'pmdMain', 'spotbugsMain'
    group = 'verification'
    description = 'Runs all code quality checks'
}

// Add combined reporting task
task generateReports {
    dependsOn 'jacocoTestReport'
    group = 'reporting'
    description = 'Generates all reports'
}

// Magic build configuration
ext {
    magicBuildParallel = true  // Enable parallel execution
    magicBuildCacheEnabled = true  // Enable build cache
    magicBuildFailFast = true  // Stop on first failure
}

// Magic build command that orchestrates everything
task magic {
    group = 'build'
    description = 'Magic build command that does everything in the optimal order'
    
    // Define task ordering
    mustRunAfter clean
    
    doFirst {
        // Configure build optimizations
        if (magicBuildParallel) {
            gradle.startParameter.setParallelProjectExecutionEnabled(true)
            gradle.startParameter.setMaxWorkerCount(Runtime.runtime.availableProcessors())
        }
        if (magicBuildCacheEnabled) { 
            gradle.startParameter.buildCacheEnabled = true
        }
        if (magicBuildFailFast) {
            gradle.startParameter.continueOnFailure = false
        }
        
        println """
??????????????????????????????????????????
?           MAGIC BUILD START            ?
?----------------------------------------?
? Parallel: ${magicBuildParallel ? '?' : '?'}                        ?
? Cache: ${magicBuildCacheEnabled ? '?' : '?'}                          ?
? Fail Fast: ${magicBuildFailFast ? '?' : '?'}                       ?
? Processors: ${Runtime.runtime.availableProcessors()}                        ?
??????????????????????????????????????????
"""
    }
    
    doLast {
        def testResults = tasks.test.didWork ? tasks.test.state.failure == null : false
        def qualityResults = tasks.codeQualityCheck.didWork ? tasks.codeQualityCheck.state.failure == null : false
        def coverageResults = tasks.jacocoTestReport.didWork ? tasks.jacocoTestReport.state.failure == null : false
        
        def coveragePercentage = { -> try { new XmlSlurper().parse(file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")).counter.find { it.@type == 'LINE' }.@covered.toInteger() * 100 / (it.@missed.toInteger() + it.@covered.toInteger()) } catch (any) { 0 } }.call()
        println """
??????????????????????????????????????????
?         MAGIC BUILD COMPLETE           ?
?----------------------------------------?
? Build: ${project.buildDir}             
? Tests: ${testResults ? '?' : '?'} (${tasks.test.testResult?.testCount ?: 0} tests)
? Quality Checks: ${qualityResults ? '?' : '?'} 
? Coverage: ${coverageResults ? '?' : '?'} (${coveragePercentage}%)
    new XmlSlurper().parse(file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml"))
    .counter.find { it.@type == 'LINE' }.@covered.toInteger() * 100 /
    it.@missed.toInteger()
} catch (any) { 0 }}%)
??????????????????????????????????????????
"""
    }
}

// Add magic configuration task
task configureMagic {
    group = 'build'
    description = 'Configure magic build settings'
    
    doLast {
        def console = System.console()
        if (console) {
            ext.magicBuildParallel = console.readLine('Enable parallel execution? (Y/n): ').toLowerCase() != 'n'
            ext.magicBuildCacheEnabled = console.readLine('Enable build cache? (Y/n): ').toLowerCase() != 'n'
            ext.magicBuildFailFast = console.readLine('Enable fail-fast? (Y/n): ').toLowerCase() != 'n'
            
            def props = file('gradle.properties')
            props.text = """
                # Magic build configuration
                magicBuildParallel=${ext.magicBuildParallel}
                magicBuildCacheEnabled=${ext.magicBuildCacheEnabled}
                magicBuildFailFast=${ext.magicBuildFailFast}
            """.stripIndent()
            
            println "Magic build configuration saved to gradle.properties"
        } else {
            println "Console not available. Please edit gradle.properties manually."
        }
    }
}

// Configure magic task dependencies
magic.dependsOn clean
magic.dependsOn compileJava
magic.dependsOn compileTestJava
magic.dependsOn processResources
magic.dependsOn processTestResources
magic.dependsOn codeQualityCheck
magic.dependsOn test
magic.dependsOn jacocoTestReport
magic.dependsOn generateReports
magic.dependsOn assemble
magic.dependsOn check
magic.dependsOn build

// Configure task ordering for magic build
tasks.named('compileJava') { mustRunAfter clean }
tasks.named('compileTestJava') { mustRunAfter compileJava }
tasks.named('processResources') { mustRunAfter clean }
tasks.named('processTestResources') { mustRunAfter processResources }
tasks.named('codeQualityCheck') { mustRunAfter compileJava }
tasks.named('test') { mustRunAfter codeQualityCheck }
tasks.named('jacocoTestReport') { mustRunAfter test }
tasks.named('generateReports') { mustRunAfter jacocoTestReport }
tasks.named('assemble') { mustRunAfter test }
tasks.named('check') { mustRunAfter assemble }
tasks.named('build') { mustRunAfter check }

// Add performance tracking
def startTime

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(magic)) {
        startTime = System.currentTimeMillis()
    }
}

gradle.buildFinished { result ->
    if (result.gradle.taskGraph.hasTask(magic)) {
        def duration = System.currentTimeMillis() - startTime
        println "\nMagic build completed in ${duration/1000} seconds"
        
        if (!result.failure) {
            println "\n? Magic build successful! ?"
        } else {
            println "\n? Magic build failed! Check the logs above for details."
        }
    }
}
